#!/usr/bin/env python
# -*- coding: utf-8 -*-

from tkinter import ttk
import tkinter as tk
import sqlite3 as sql
import sys

# search button push event
def pressed():
    entry = pEntry.get()

    # delete old entries to prevent merge/id collisions
    for i in tree.get_children():
        tree.delete(i)

    lookup(entry)

# defines database intecation behavior
def lookup(entry):
    con = None

    try:
        # setup connection
        con = sql.connect('../proj.db')
        cur = con.cursor()
        print(searchTeams)
        # execute SQL queries against database
        if (searchTeams.get() == 0):
            cur.execute("SELECT * FROM Player WHERE playerName LIKE \'" + entry + "\'")
            players = cur.fetchall()
            cur.execute("SELECT * FROM Player NATURAL JOIN GameStats WHERE playerName LIKE \'" + entry + "\'")
            rows = cur.fetchall()

            for row in players:
                tree.insert('', 0, iid = row[0], values = row[1:2])


            for row in rows:
                tree.insert(row[0], 1, values = ("",) + row[2:22])

        else: #searching for teams

            cur.execute("SELECT playerName FROM Player P, Playsfor F, Team T WHERE P.playerID = F.playerID AND F.teamID = T.teamID AND T.teamName LIKE \'" + entry + "\'")
            players = cur.fetchall()
            print(players)
            for row in players:
                tree.insert('', 0, iid = row[0], values = row[0:2])

    # handle SQL specific errors
    except sql.Error as e:
        
        print("Error %s:" % e.args[0])
        sys.exit(1)
        
    finally:
        
        if con:
            con.close()

def sort_by_column(tree, col, reverse):
    l = [(tree.set(k, col), k) for k in tree.get_children('')]
    l.sort(reverse=reverse)

    # rearrange items in sorted positions
    for index, (val, k) in enumerate(l):
        tree.move(k, '', index)

    # reverse sort
    tree.heading(col, command=lambda _col=col: sort_by_column(tree, _col, not reverse))


# initialize TK
top = tk.Tk()

searchTeams = tk.IntVar()

# setup frames
psearchFrame = tk.Frame(top)
psearchFrame.pack(side = tk.TOP)
lowerFrame = tk.Frame(top)
lowerFrame.pack(side = tk.BOTTOM)

# setup search button
pButton = tk.Button(psearchFrame, text = 'Search', command = pressed)
pButton.pack(side = tk.LEFT, pady = 20, padx = 20)

cb = tk.Checkbutton(psearchFrame, text="Search Teams", variable=searchTeams)
cb.pack(side=tk.RIGHT)

# setup label and search box
pLabel = tk.Label(psearchFrame, text="Query:")
pLabel.pack( side = tk.LEFT)
pEntry = tk.Entry(psearchFrame, bd =5)
pEntry.pack(side = tk.RIGHT)

# define displayed columns
columns = ('Name', 'game', 'pa', 'atBats', 'runs', 'hits', 'b2', 'b3', 'hr', 'rbi', 'sb', 'cs', 'bb', 'so', 'p_innings', 'p_hits', 'p_runs', 'p_er', 'p_hr', 'p_bb', 'p_so')

# initialize tree
tree = ttk.Treeview(top, columns=columns, show='headings')

# create columns in tree view with names from 'columns'
for col in columns:
    tree.heading(col, text=col, command=lambda _col=col: sort_by_column(tree, _col, False))
    if(col == 'Name'):
        tree.column(col, width = 80)
    else:
        tree.column(col, width = 30)

# push tree to window
tree.pack()
# main input/render loop, don't put anything after this since it will never run
top.mainloop()